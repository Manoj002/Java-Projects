package jdbctransaction;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.sql.Statement;

public class JdbcTransaction {

    public static void main(String[] args) {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/chatdata", "root", "root");
            System.out.println("Connection established...");
            //conn.commit(); //commits the transaction
            conn.setAutoCommit(false); /*in a program there can be several transaction so this statement commits all transaction... its default
            beginning of a transaction*/
            PreparedStatement st = conn.prepareStatement("INSERT into user values(?,?,?)");
            System.out.println("1st insert");
            st.setInt(1, 15);
            st.setString(2, "Rakesh");
            st.setString(3, "Rakesh123");
            st.execute();
            showTable(conn, "user");
            System.out.println("2nd insert");
            st.setInt(1, 13);
            st.setString(2, "Sarvesh");
            st.setString(3, "Sarvesh123");
            st.execute();
            showTable(conn, "user");
            System.out.println("3rd insert");
            st.setInt(1, 14);
            st.setString(2, "Arvind");
            st.setString(3, "Arvind123");
            st.execute();
            Savepoint p1 = conn.setSavepoint("Save Point-1");//
            System.out.println("\n\nPrinting the state of table at savepoint 1");
            /*setSavepoint(String savepointName): Defines a new savepoint. 
                It also returns a Savepoint object.
              releaseSavepoint(Savepoint savepointName): Deletes a savepoint. 
                Notice that it requires a Savepoint object as a parameter. 
                This object is usually a savepoint generated by the setSavepoint() method.*/
            showTable(conn, "user");
            st.setInt(1, 16);
            st.setString(2, "Luv");
            st.setString(3, "Luv123");
            st.execute();
            showTable(conn, "user");
            st.setInt(1, 17);
            st.setString(2, "Kush");
            st.setString(3, "Kush123");
            st.execute();
            showTable(conn, "user");
            conn.rollback(p1);//rolls back after savepoint
            System.out.println("Rolling back...");
            conn.commit();//committing the transaction
            System.out.println("\n\nPrinting the state of table after commiting at save point-1");
            showTable(conn, "user");
        } catch(ClassNotFoundException cnf) {
            System.out.println("ClassNotFoundException");
        } catch(SQLException ex){
            System.out.println("SQLException");
        }
    }
    
    static void showTable(Connection conn, String table_name) {
        System.out.println("\n\n");
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT * from " + table_name);
            ResultSetMetaData rsmd = rs.getMetaData();
            for(int i = 1; i <= rsmd.getColumnCount(); i++) {
                System.out.print(rsmd.getColumnName(i)+"\t");
            }
            System.out.println("");
            while(rs.next()) {
                for(int i = 1; i <= rsmd.getColumnCount(); i++) {
                    System.out.print(rs.getObject(i)+ "\t");
                }
                System.out.println("");
            }
        } catch(SQLException ex) {
            System.out.println("SQLException");
        }
    }
}
